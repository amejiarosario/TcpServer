#include <QtCore/QCoreApplication>
#include<iostream>
#include<QtNetwork/QTcpServer>
#include<QtNetwork/QNetworkInterface>


class Server : public QObject
{
    Q_OBJECT

public:
    Server()
    {
        tcpServer = new QTcpServer(this);

        //QTcpServer::listen() to set up a QTcpServer to listen on all addresses, on an arbitrary port.
        if (!tcpServer->listen()) {
            std::cout << "Unable to start the server: "
                      << tcpServer->errorString().toStdString();
            //close();
            //return;
        }
        else
        {
            QString ipAddress;
            QList<QHostAddress> ipAddressesList = QNetworkInterface::allAddresses();
            // use the first non-localhost IPv4 address
            for (int i = 0; i < ipAddressesList.size(); ++i) {
                if (ipAddressesList.at(i) != QHostAddress::LocalHost && ipAddressesList.at(i).toIPv4Address()) {
                    ipAddress = ipAddressesList.at(i).toString();
                    break;
                }
            }
            // if we did not find one, use IPv4 localhost
            if (ipAddress.isEmpty())
                ipAddress = QHostAddress(QHostAddress::LocalHost).toString();
            std::cout << "The server is running on\n\nIP:"
                 << ipAddress.toStdString()
                 << "\nport: "
                 << tcpServer->serverPort();
        }

        connect(tcpServer, SIGNAL(newConnection()),this,SLOT(sendReply()));
    }

private slots:
    void sendReply()
    {
        std::cout << "Server::sendReply()";
        return;
    }

private:
    QTcpServer *tcpServer;

};

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    std::cout << "TCP Server v.3";
    Server server;

    return a.exec();
}
